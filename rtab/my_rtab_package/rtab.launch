<launch>
  
  <arg name="database_path"     default="rtabmap.db"/>
  <arg name="localization"      default="false"/>
  <arg name="args"              default=""/>
  
  <arg name="wait_for_transform"  default="0.2"/> 
  
  <!-- Navigation stuff (move_base) -->
  <include file="$(find turtlebot_navigation)/launch/includes/move_base_rtab.launch.xml"/>
  
  <!-- Mapping -->
  <group ns="rtabmap">

    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg args)">
      <param name="database_path"       type="string" value="$(arg database_path)"/>
      <param name="frame_id"            type="string" value="base_footprint"/>
      <param name="odom_frame_id"       type="string" value="odom"/>
      <param name="wait_for_transform_duration"  type="double"   value="$(arg wait_for_transform)"/>
      <param name="subscribe_depth"     type="bool"   value="true"/>
      <param name="subscribe_scan"      type="bool"   value="true"/>
    
      <!-- inputs -->
      <remap from="scan"            to="/kobuki/laser/scan"/>
      <remap from="rgb/image"       to="/camera/rgb/image_raw"/>
      <remap from="depth/image"     to="/camera/depth/image_raw"/>
      <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
      
      <!-- output -->
      <remap from="grid_map" to="/map"/>
    
      <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
      <param name="RGBD/ProximityBySpace"        type="string" value="true"/>   
      <param name="RGBD/OptimizeFromGraphEnd"    type="string" value="false"/>  
      <param name="Kp/MaxDepth"                  type="string" value="4.0"/>
      <param name="Reg/Strategy"                 type="string" value="1"/>      
      <param name="Icp/CoprrespondenceRatio"     type="string" value="0.3"/>
      <param name="Vis/MinInliers"               type="string" value="5"/>      
      <param name="Vis/InlierDistance"           type="string" value="0.1"/>    
      <param name="RGBD/AngularUpdate"           type="string" value="0.1"/>    
      <param name="RGBD/LinearUpdate"            type="string" value="0.1"/>    
      <param name="Rtabmap/TimeThr"              type="string" value="700"/>
      <param name="Mem/RehearsalSimilarity"      type="string" value="0.30"/>
      <param name="Optimizer/Slam2D"             type="string" value="true"/>
      <param name="Reg/Force3DoF"                type="string" value="true"/>   
      
      <!-- localization mode -->
      <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
      <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
      <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/> 
    </node>
   
  </group>
</launch>

<!-- frame_id (string, default: "base_link"): The frame attached to the mobile base.
odom_frame_id (string, default: ""): The frame attached to odometry. If empty, rtabmap will subscribe to odom 
topic to get odometry. If set, odometry is got from tf (in this case, a covariance of 1 is used).
subscribe_depth (bool, default: "true"): Subscribe to depth image.
subscribe_scan (bool, default: "false"): Subscribe to laser scan.
wait_for_transform (bool, default: "true"): Wait (maximum wait_for_transform_duration sec) for transform when 
a tf transform is not still available.
wait_for_transform_duration (double, default: 0.1): Wait duration for wait_for_transform. 
To avoid some possible errors, it is recommended to set this value to "0.2".
database_path (string, default: "~/.ros/rtabmap.db"): Path of the RTAB-Map's database. -->

<!-- RGBD/NeighborLinkRefining: Correct odometry using the input laser topic using ICP.
RGBD/ProximityBySpace: Find local loop closures based on the robot position in the map. It is useful when the robot, for example, is coming back in the opposite direction. With camera facing back, global loop closures cannot be found. So using the position and previously added laser scans to the map, we find the transform using ICP. Be aware that on large-scale mapping, this method should be disabled because when the odometry is very erroneous, local ICP could give wrong results (false loop closures).
RGBD/AngularUpdate: The robot should move to update the map (if not 0).
RGBD/LinearUpdate: The robot should move to update the map (if not 0).
RGBD/OptimizeFromGraphEnd: Here we optimized from the latest node added to the map instead of the first. By optimizing from the last, the last pose keeps it's value and all the previous poses are corrected according to it (so /odom and /map will always match together). By optimizing from the first, all the successive nodes are corrected according to the first one (so there will be a transformation between /odom and /map to correct the last pose added). However, by optimizing from the first: when some nodes are transferred, the first referential of the local map may change, resulting in momentary changes in robot/map position (which are annoying in teleoperation).
Optimizer/Slam2D: Do 2D graph optimization (only optimize x, y and yaw values).
Reg/Strategy: We chose ICP to refine global loop closures found with ICP using the laser scans.
Reg/Force3DoF: Force 3DoF registration: roll, pitch and z won't be estimated.
Vis/MinInliers: Minimum visual words inliers (after RANSAC transformation between images of a loop closure) to accept the transformation.
Vis/InlierDistance: From the RANSAC transformation computed, the maximum distance of the visual word inliers.
Rtabmap/TimeThr: The maximum time allowed for map update. When this threshold is reached, some nodes are transferred in the Long-Term Memory to satisfy real-time constraints. The map will be published without these nodes (until retrieved from Long-Term Memory to Working Memory).
Mem/RehearsalSimilarity: In the papers, it is referred as the Weight Update threshold. If consecutive nodes have similar images (over this threshold), they are merged together, increasing the total weight of the merged node. The weighting mechanism is used for the memory management approach (less weighted nodes will be transferred first to Long-Term Memory). -->